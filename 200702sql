GROUP 함수의 특징
1. NULL은 그룹함수 연산에서 제외가 된다
부서번호별 사원의 sal, comm 컬럼의 총 합을 구하기

SELECT deptno, SUM(sal + comm), SUM(sal +NVL(comm,0)), SUM(sal) + SUM(comm)
FROM emp
GROUP BY deptno;

NULL 처리의 효율
호출 횟수로 인해 위에 것의 처리가 더 낫다.
SELECT deptno, SUM(sal) + NVL(SUM(comm),0)
FROM emp
GROUP BY deptno;

SELECT deptno, 
        SUM(sal) + SUM(NVL(comm,0))
FROM emp
GROUP BY deptno;

칠거지약
3. DEcode 또는 CASE를 사용시에 새끼를 증손자 이상 낳치 말아라.

실습 grp1
emp테이블을 이용하여 다음을 구하시오
1. 직원중 가장 높은 급여
2. 직원중 가장 낮은 급여
3. 직원의 급여 평균
4. 직원의 급여 합
5. 직원의 급여가 있는 직원의 수(null제외)
6. 직원중 상급자가 있는 직원의 수 (null제외)
7. 전체 직원 수
SELECT MAX(sal) MAX_SAL, 
       MIN(sal) MIN_SAL, 
       ROUND(avg(sal),2) AVG_SAL, 
       SUM(sal) SUM_SAL,
       COUNT(sal)COUNT_SAL,
       COUNT(mgr) COUNT_MGR,
       COUNT(*) COUNT_ALL
FROM emp;

실습 grp2
SELECT deptno,
       MAX(sal) MAX_SAL, 
       MIN(sal) MIN_SAL, 
       ROUND(avg(sal),2) AVG_SAL, 
       SUM(sal) SUM_SAL,
       COUNT(sal)COUNT_SAL,
       COUNT(mgr) COUNT_MGR,
       COUNT(*) COUNT_ALL
FROM emp
GROUP BY deptno;

실습 grp3(칠전지약 3.)
SELECT DECODE(deptno,
                10, 'ACCOUNTING',
                20, 'RESEARCH',
                30, 'SALES',
                'DDIT') DNAEM,
       MAX(sal) MAX_SAL, 
       MIN(sal) MIN_SAL, 
       ROUND(avg(sal),2) AVG_SAL, 
       SUM(sal) SUM_SAL,
       COUNT(sal)COUNT_SAL,
       COUNT(mgr) COUNT_MGR,
       COUNT(*) COUNT_ALL
FROM emp
GROUP BY deptno;

실습 grp4
SELECT hire_yyyymm, COUNT(hire_yyyymm) CNT
FROM(SELECT TO_CHAR(hiredate, 'YYYYMM') hire_yyyymm
FROM emp)
GROUP BY hire_yyyymm;

SELECT TO_CHAR(hiredate, 'YYYYMM'), COUNT(*) CNT
FROM emp
GROUP BY TO_CHAR(hiredate, 'YYYYMM');

실습 grp5
SELECT TO_CHAR(hiredate, 'YYYY'), COUNT(*) CNT
FROM emp
GROUP BY TO_CHAR(hiredate, 'YYYY');

실습 grp6
회사에 존재하는 부서의 개수는 몇개인지 조회하는 쿼리를 작성하시오. (dept 테이블 사용)
SELECT COUNT(*) CNT
FROM dept;

실습 grp7
직원이 속한 부서의 개수를 조회하는 쿼리를 작성하시오 (emp 테이블 사용)
SELECT COUNT(*) CNT
FROM (SELECT deptno 
      FROM emp
      GROUP BY deptno);
      
SELECT COUNT(COUNT(deptno)) CNT
FROM emp
GROUP BY deptno;

JOIN : 컬럼을 확장하는 방법 (데이터를 연결한다)
       다른 테이블의 컬럼을 가져온다
RDBMS가 중복을 최소화하는 구조이기 때문에
하나의 테이블에 데이터를 전부 담지 않고, 목적에 맞게 설계한 테이블에 데이터가 분산이 된다.
하지만 데이터를 조회할 때 다른 테이블의 데이터를 연결하여 컬럼을 가져올 수 있다.

ANSI-SQL : American National Standard Institute SQL
ORACLE-SQL 문법

JOIN : ANSI-SQL
       ORACLE-SQL의 차이가 다소 발생

ANSI-SQL join
NATURAL JOIN : 조인하고자 하는 테이블간 컬럼명이 동일할 경우 해당 컬럼으로 행을 연결
               컬럼 이름 뿐만 아니라 데이터 타입도 동일해야함.
문법 : 
SELECT 컬럼...
FROM 테이블1, NATURAL JOIN 테이블2

emp, dept 두테이블의 공통된 이름을 갖는 컬럼 : deptno

조인 조건으로 사용된 컬럼은 테이블 한정자를 붙이면 에러(ANSI-SQL)
SELECT emp.empno, emp.ename, deptno, dept.dname
FROM emp NATURAL JOIN dept;

위의 쿼리를 ORACLE 버전으로 수정
오라클에서는 조인 조건을 WHERE절에 기술
행을 제한하는 조건, 조인 조건 ==> WHERE 절에 기술


SELECT emp.*, emp.deptno, dname
FROM emp, dept
WHERE emp.deptno = dept.deptno;

ANSI-SQL : JOIN WITH USING
조인 테이블간 동일한 이름의 컬럼이 복수개인데 실제 조인하려는 컬럼중 일부로만 조인하고 싶을 때 사용 (잘 사용하지 않음, 참고)

SELECT *
FROM emp JOIN dept USING (deptno);

위의쿼리를 ORACLE 조인으로 변경하려면??
SELECT *
FROM emp, dept
WHERE emp.deptno = dept.deptno;

ANSI-SQL : JOIN WITH ON
위에서 배운 NATURAL JOIN, JOIN WITH USING의 경우 조인 테이블의 조인컬럼이 
이름 같아야 한다는 제약 조건이 있음
설계상 두 테이블의 컬럼 이름 다를수도 있음. 컬럼 이름이 다를 경우
개발자가 직접 조인 조건을 기술할 수 있도록 제공 해주는 문법
SELECT *
FROM emp JOIN dept ON (emp.deptno = dept.deptno);

ORACLE-SQL
SELECT *
FROM emp, dept
WHERE emp.deptno = dept.deptno;

SELF-JOIN : 동일한 테이블끼리 조인 할 때 지칭하는 명칭
            (별도의 키워드가 아니다.)
            
SELECT 사원번호, 사원이름, 사원의 상사 사원번호, 사원의 상사이름
FROM emp;
KING의 경우 상사가 없기 때문에 조인에 실패한다.
총 행의 수는 13건이 조회된다.
SELECT e.empno, e.ename, e.mgr, m.ename
FROM emp e JOIN emp m ON( e.mgr = m.empno);

사원 중 사원의 번호가 7369~7698인 사원만 대상으로 해당 사원의 사원번호, 이름, 상사의 사원번호, 상사의 이름 조회
SELECT e.*, emp.ename 
FROM (SELECT empno, ename, mgr
      FROM emp
      WHERE  empno >= 7369 AND empno <= 7698) e, emp
WHERE e.mgr = emp.empno;
      
WHERE empno BETWEEN 7369 AND 7698 ==> 동일함

SELECT e.empno, e.ename, e.mgr, m.ename
FROM emp e JOIN emp m ON (e.mgr = m.empno)
WHERE e.empno BETWEEN 7369 AND 7698;

SELECT e.*, emp.ename 
FROM (SELECT empno, ename, mgr
      FROM emp
      WHERE  empno >= 7369 AND empno <= 7698) e JOIN emp ON (e.mgr = emp.empno);
      
NON-EQUI-JOIN : 조인 조건이 = 이 아닌 조인
!= 값이 다를 때 연결

SELECT *
FROM salgrade;

SELECT empno, ename, sal, grade
FROM emp, salgrade
WHERE sal BETWEEN losal AND hisal; 

실습 join0
emp, dept 테이블을 이용하여 다음과 같이 조회되도록 쿼리를 작성하세요
SELECT empno, ename, emp.deptno, dname
FROM emp, dept
WHERE emp.deptno = dept.deptno;

실습 join0_1
emp, dept테이블을 이용하여 다음과 같이 조회되도록 쿼리를 작성하세요
(부서번호가 10, 30인 데이터만 조회)
SELECT empno, ename, e.deptno, dname
FROM (SELECT empno, ename, deptno
      FROM emp
      WHERE deptno = 10 OR deptno = 30) e, dept 
WHERE e.deptno = dept.deptno;

SELECT empno, ename, emp.deptno, dname
FROM emp , dept
WHERE emp.deptno = dept.deptno
      AND emp.deptno IN (10,30);
      
누구나 코딩을 할 수 있다
자꾸만 에러가 나오는데 왜 그런걸까요??